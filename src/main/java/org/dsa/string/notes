String Data Structure:-
~~~~~~~~~~~~~~~~~~~~~~
01. Introduction to Strings
02. Mutablitity and Immutablity
03. Heap and SCP memory areas
04. String class constructors and methods
05. StringBuffer class constructors and methods
06. StringBuilder class constructors and methods
07. StringBuffer vs StringBuilder
08. StringTokenizer
09. Programs on String
10. Programs on StringBuffer and StringBuilder
11. Progrmas on StringTokenizer
12. Regular Expressions and its applications

Introduction:
-------------
1) 99% of data in any application is string only.

Ex:
---
	voter management system

	vid
	name
	fname
	mname
	address
	emailid
	mbl
	zipcode
	dist
	state
	etc

	name,fname,mname,address,emailid,dist,state etc

2) string is an object.
3) string is a collection or group of characters.
4) in java strings are divided into the following four groups.

	1. String
	2. StringBuffer
	3. StringBuilder
	4. StringTokenizer

5) all these objects are almost same with small differences.

	String      ----> java.lang.String
	StringBuffer ---> java.lang.StringBuffer
	StringBuilder --> java.lang.StringBuilder
	StringTokenizer-> java.util.StringTokenizer

String Constant Pool and SCP memory areas w.r.t Strings:-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Once if a string object is created, java creates that string obj in string constant pool, the main advantage of this approach is reusability.

Ex:
---
	String s1 = "abc";
	String s2 = "abc";
	String s3 = "abc";

	no. of string objects ----> 1

Ex:
---
	String s1 = new String("abc");
	String s2 = new String("abc");
	String s3 = new String("abc");

	no. of string objects -----> 3(heap) +1(scp) = 4 objects


String
------
constructors:
-------------
1) String()              ----> to create an empty string obj
2) String(StringLiteral) ----> it create a string obj with given literal
3) String(char[]) -----------> create str obj with given char[]
4) String(char[],int,int) ---> create str obj with given char[] from start to num of ch
5) String(int[],int,int) ----> create str obj with given int[] from start to num of int
6) String(byte[]) -----------> create str obj with byte[]
7) String(StringBuffer) -----> create str obj with string buffer obj
8) String(StringBuilder) ----> create str obj with string builder obj

methods:
--------
int length() ---> returns num of char present in the given string
boolean isEmpty(); --> return true if the given contains empty literal
char charAt(int index); --> return char present at given index
boolean startsWith(str); ---> returns true if given str starts with sub-str
boolean endsWith(str); ---> returns true if given str ends with sub-str
char[] toCharArray();---> converts given str into char[]
byte[] getBytes(); ----> converts given str into byte[]
boolean equals(str);
boolean equalsIgnoreCase(str);
int indexOf(char) ---> returns index of first occurrent of that char
int lastIndexOf(char) ---> returns index of last occurrent of that char
int compareTo(Str) ----> it compare two str based on ascii values
int compareToIgnoreCase(Str) ----> it compare two str based on ascii values
String substring(begin_index);
String substring(begin_index,end_index);
boolean contains(str)
String concat(str) => it is used to concatenation of two strings
String replace(old_c,new_c) ==> it replaces old char with new char
String toUpperCase() ===> it converts each char into upper case
String toLowerCase() ===> it converts each char into lower case
String[] split(delimiter) ===> based on given delimiter it split the given string

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		System.out.println("abc".equals("def"));//false
		System.out.println("abc".equals("abc"));//true
		System.out.println("abc".equals("ABC"));//false
		System.out.println("abc".equalsIgnoreCase("ABC"));//true
	}
}

output:
-------
false
true
false
true

Ex:
---
class Test
{
	static String toSwapCase(String s){
		StringBuffer sb = new StringBuffer();
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)>='a' && s.charAt(i)<='z')
				sb.append((char)(s.charAt(i)-32));
			if(s.charAt(i)>='A' && s.charAt(i)<='Z')
				sb.append((char)(s.charAt(i)+32));
		}
		return sb.toString();
	}
	public static void main(String[] args)
	{
		System.out.println("abc".toUpperCase());//ABC
		System.out.println("ABC".toLowerCase());//abc
		System.out.println("WeLcOmE".toLowerCase());//welcome
		System.out.println("WeLcOmE".toUpperCase());//WELCOME
		System.out.println(toSwapCase("WeLcOmE"));//wElCoMe
	}
}

output:
-------
ABC
abc
welcome
WELCOME
wElCoMe

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		System.out.println("java is very easy".startsWith("python"));//false
		System.out.println("java is very easy".startsWith("java"));//true

		System.out.println("java is very easy".endsWith("easy"));//true
		System.out.println("java is very easy".endsWith("difficult"));//false
	}
}

output:
-------
false
true
true
false


String Handling Programs:
-------------------------
01) Print char and corresponding index value?
---------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			System.out.println(i+" ====> "+s.charAt(i));
		}
	}
}

output:
-------
welcome
0 ====> w
1 ====> e
2 ====> l
3 ====> c
4 ====> o
5 ====> m
6 ====> e

02) Print char and corresponding index value which are present at even indexed loc?
------------------------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			if(i%2==0)
				System.out.println(i+" ====> "+s.charAt(i));
		}
	}
}

output:
-------
welcome
0 ====> w
2 ====> l
4 ====> o
6 ====> e

03) Print char and corresponding index value which are present at odd indexed loc?
------------------------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			if(i%2!=0)
				System.out.println(i+" ====> "+s.charAt(i));
		}
	}
}

output:
-------
welcome
1 ====> e
3 ====> c
5 ====> m

04) print vowels present in the given string
--------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			char temp = s.charAt(i);
			if(temp=='a'||temp=='e'||temp=='i'||temp=='o'||temp=='u')
				System.out.println(s.charAt(i));
		}
	}
}

output:
-------
welcome
e
o
e

05) print consonants present in the given string
-------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			char temp = s.charAt(i);
			if(!(temp=='a'||temp=='e'||temp=='i'||temp=='o'||temp=='u'))
				System.out.println(s.charAt(i));
		}
	}
}

output:
-------
welcome
w
l
c
m

06) count number of vowels in string
07) count number of consonants in string

08) sort all characters present in the given string in asc order?
-----------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("welcome");
		char ch[] = s1.toCharArray();

		Arrays.sort(ch);
		String s2 = new String(ch);

		System.out.println(s1);
		System.out.println(s2);
	}
}

output:
-------
welcome
ceelmow

09) sort all characters present in the given string in desc order?
-----------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("welcome");
		String s2 = "";
		char ch[] = s1.toCharArray();

		Arrays.sort(ch);

		for(int i=ch.length-1;i>=0;i--){
			s2=s2+ch[i];
		}

		System.out.println(s1);
		System.out.println(s2);
	}
}

output:
-------
welcome
womleec


10) check whether two strings are anagrams or not?
--------------------------------------------------
"acb", "abc" ---> true

import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("race");
		String s2 = new String("care");
		String s3 = new String("cary");

		char ch1[] = s1.toCharArray();
		char ch2[] = s2.toCharArray();
		char ch3[] = s3.toCharArray();

		Arrays.sort(ch1);
		Arrays.sort(ch2);
		Arrays.sort(ch3);

		System.out.println(Arrays.equals(ch1,ch2));
		System.out.println(Arrays.equals(ch1,ch3));
	}
}

output:
-------
true
false


https://us06web.zoom.us/meeting/register/tZAvcO-opzguGNaWtfrsprIdPPZ10KZALTcr

java.lang.StringBuffer:
-----------------------
=> it is a group of characters.
=> it is mutable object, i.e. modifications are allowed.
=> 1.0 version (legacy)
=> allow only single thread to operate (single thread based application)
=> storing results in the university result db. (StringBuffer).
=> every method is synchronozed.

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome ");
		s.concat("python");
		System.out.println(s);//welcome
	}
}

output:
-------
welcome

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome ");
		s=s.concat("python");
		System.out.println(s);//welcome python
	}
}

output:
-------
welcome python

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		StringBuffer sb = new StringBuffer("welcome ");
		sb.append("java");
		System.out.println(sb);//welcome java
	}
}

output:
-------
welcome java

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		StringBuilder sb = new StringBuilder("welcome ");
		sb.append("prakash");
		System.out.println(sb);//welcome prakash
	}
}

output:
-------
welcome prakash

java.lang.StringBuilder:
-----------------------
=> it is a group of characters.
=> it is mutable object, i.e. modifications are allowed.
=> 1.5 version (not legacy)
=> allow multiple threads to operate (multi threaded based application)
=> retriving results from the university result db. (StringBuilder).
=> every method is non-synchronozed.

Ex:
---
	synchronized void insertData(123,99){
		---------------
		---------------
	}

	void ReadData(123){
		---------------
		---------------
	}

all the methods and constructors are same in StringBuffer and StringBuilder

construction of string buffer objects:-
--------------------------------------
1) StringBuffer(); -------> an empty string buffer obj with 16 as default capacity
2) StringBuffer(int); ----> an empty sb obj with given capacity
3) StringBuffer(str); ----> a sb obj with given string (capacity: 16+len of str)

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		StringBuffer sb1 = new StringBuffer();
		StringBuffer sb2 = new StringBuffer(100);
		StringBuffer sb3 = new StringBuffer("abc");
		System.out.println(sb1.capacity());//16
		System.out.println(sb2.capacity());//100
		System.out.println(sb3.capacity());//16+3=19
	}
}

output:
-------
16
100
19

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		StringBuffer sb = new StringBuffer();

		sb.append("abcdefghijklmnop");
		System.out.println(sb);//abcdefghijklmnop
		System.out.println(sb.capacity());//16

		sb.append("q");
		System.out.println(sb);//abcdefghijklmnopq
		//new capcaity = (old capacity+1)*2
		System.out.println(sb.capacity());//(16+1)*2=17*2=34
	}
}

output:
-------
abcdefghijklmnop
16
abcdefghijklmnopq
34

methods:
--------
int length()         -----------> return number of characters present
int capacity()         ---------> return max number of characters are allowed
void setLength(int) -        ---> set the string buffer length
void trimToSize() -        -----> remove unwanted spaces
void ensureCapacity(int)     ---> to increase capacity of sb
char charAt(int)      ----------> return char present at the given location
void setCharAt(int,char)     ---> it replaces char present given location with new char
StringBuffer append(obj)     ---> it inserts the given obj at the end of sb
StringBuffer insert(int,obj) ---> it inserts the given obj at the given location in sb
StringBuffer delete(start,end) -> it removes characters present from start to end-1
StringBuffer reverse() ---------> it reverse the content of sb

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		StringBuffer sb = new StringBuffer("abcdefg");
		System.out.println(sb);//abcdefg
		System.out.println(sb.charAt(0));//a
		System.out.println(sb.charAt(1));//b
		sb.setCharAt(1,'W');
		System.out.println(sb);//aWcdefg
		sb.deleteCharAt(3);
		System.out.println(sb);//aWcefg
	}
}

output:
-------
abcdefg
a
b
aWcdefg
aWcefg

Ex:
---
class Test
{
	public static void main(String[] args)
	{
		StringBuffer sb = new StringBuffer("welcome ");
		System.out.println(sb);//welcome
		sb.append("java ");
		sb.append(18);
		sb.append(" and ");
		sb.append(3.9);
		System.out.println(sb);//welcome java 18 and 3.9
		sb.insert(8,"to ");
		sb.insert(23,"python ");
		System.out.println(sb);//welcome to java 18 and python 3.9
		sb.delete(11,23);
		System.out.println(sb);//welcome to python 3.9
	}
}

output:
-------
welcome
welcome java 18 and 3.9
welcome to java 18 and python 3.9
welcome to python 3.9

java.util.StringTokenizer
-------------------------
=> it is an utility provided by java.util pacakge.
=> it divides the string into tokens

"java is very easy" -----> ["java","is","very","easy"]
"19-12-2022" ------------> ["19","12","2022"]
"05:51" -----------------> ["05","51"]

StringTokenizer st = new StringTokenizer(string,delimiter); //defaulat del is ' '

int countTokens() --------> return number of tokens
boolean hasMoreTokens() --> return true if there is token
String nextToken() -------> return current token and transfer the control to next token


Ex: reverse the given string
----------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		System.out.println("Original String="+s);
		System.out.println("Reversed String="+new StringBuffer(s).reverse());
	}
}

output:
-------
Enter any string:
prakash
Original String=prakash
Reversed String=hsakarp

Ex: paliandrome string
----------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		String ss = new StringBuffer(s).reverse().toString();

		System.out.println(s.equals(ss));
	}
}

output:
-------
C:\prakashclasses>java Test
Enter any string:
liril
true

C:\prakashclasses>java Test
Enter any string:
madam
true

C:\prakashclasses>java Test
Enter any string:
abcd
false

C:\prakashclasses>java Test
Enter any string:
123
false

C:\prakashclasses>java Test
Enter any string:
121
true

Ex: read a string and convert into words
----------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens()){
			System.out.println(st.nextToken());
		}
	}
}

output:
-------
Enter any string:
java is very very easy to understand.
java
is
very
very
easy
to
understand.

Ex: read a string seperated by , and fetch data one by one
-----------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		StringTokenizer st = new StringTokenizer(s,",");
		while(st.hasMoreTokens()){
			System.out.println(st.nextToken());
		}
	}
}

output:
-------
Enter any string:
10,20,30,40,50
10
20
30
40
50

Ex: read a sentence and reverse the total given sentence
--------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer(s);
		sb.reverse();
		System.out.println(sb);
	}
}

output:
-------
Enter any string:
java is very very difficult while learning
gninrael elihw tluciffid yrev yrev si avaj

Ex: read a string and reverse and individual words
--------------------------------------------------
abc def ijk mno wxyz ----> cba fed kji onm zyxw

import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);

		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java is very easy for coding.
avaj si yrev ysae rof .gnidoc

Ex: read a string and reverse alternative words
-----------------------------------------------
abc def ijk mno wxyz ----> abc fed ijk onm wxyz
abc def ijk mno wxyz ----> cba def kji mno zyxw

import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		int i=0;
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			if(i%2==0)
				sb.append(ss);
			else
				sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
			i++;
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
abc def ijk pqrs xyz
abc fed ijk srqp xyz

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		int i=0;
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			if(i%2!=0)
				sb.append(ss);
			else
				sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
			i++;
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
abc def ijk pqrs xyz
cba def kji pqrs zyx

Ex: read a string and reverse even length words
-----------------------------------------------
java was very easy programming language when compared with other

avaj was yrev ysae programming egaugnal nehw derapmoc htiw other


Ex:
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			if(ss.length()%2!=0)
				sb.append(ss);
			else
				sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java was very easy programming language when compared with other
avaj was yrev ysae programming egaugnal nehw derapmoc htiw other

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			if(ss.length()%2==0)
				sb.append(ss);
			else
				sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java was very easy programming language when compared with other
java saw very easy gnimmargorp language when compared with rehto

Ex: read a string and convert every word first char into caps
--------------------------------------------------------------
java was very easy programming language when compared with other
Java Was Very Easy Programming Language When Compared With Other

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();

			sb.append(ss.substring(0,1).toUpperCase()+ss.substring(1));
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java was very easy programming language when compared with other
Java Was Very Easy Programming Language When Compared With Other

Ex: read a string and convert every word first and last char into caps
-----------------------------------------------------------------------
java was very easy programming language when compared with other
JavA WaS VerY EasY ProgramminG LanguagE WheN CompareD WitH OtheR

import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);
		int n;
		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			n = ss.length();
			sb.append(ss.substring(0,1).toUpperCase()+ss.substring(1,n-1)+ss.substring(n-1,n).toUpperCase());
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}


output:
-------
Enter any string:
java was very easy programming language when compared with other
JavA WaS VerY EasY ProgramminG LanguagE WheN CompareD WitH OtheR


Ex: read a string and except first and last char remaining into upper case
--------------------------------------------------------------------------
java was very easy programming language when compared with other
JavA WaS VerY EasY ProgramminG LanguagE WheN CompareD WitH OtheR

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);
		int n;
		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			n = ss.length();
			sb.append(ss.substring(0,1)+ss.substring(1,n-1).toUpperCase()+ss.substring(n-1,n));
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java was very easy programming language when compared with other
jAVa wAs vERy eASy pROGRAMMINg lANGUAGe wHEn cOMPAREd wITh oTHEr



content comparision and reference comparision:
----------------------------------------------
primitives and objects

primitives -----> == operator for content comparision

objects -------->

				== reference comparision
				.equals() reference comparision

Ex:
---
import java.util.*;

class Demo{

}
class Test
{
	public static void main(String[] args)
	{
		Demo d1 = new Demo();
		Demo d2 = new Demo();
		Demo d3;
		d3=d1;

		System.out.println(d1==d2);//false
		System.out.println(d1.equals(d2));//false

		System.out.println(d1==d3);//true
		System.out.println(d1.equals(d3));//true
	}
}

output:
-------
false
false
true
true


String objects -------->

				== reference comparision
				.equals() content comparision

.equals() method present in java.lang.Object class, java.lang.String has overriden this method for content comparision.

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("abc");
		String s2 = new String("abc");
		String s3 = s1;

		System.out.println(s1==s2);//false
		System.out.println(s1.equals(s2));//true

		System.out.println(s1==s3);//true
		System.out.println(s1.equals(s3));//true
	}
}

output:
-------
false
true
true
true

StringBuffer objects -------->

				== reference comparision
				.equals() reference comparision

.equals() method present in java.lang.Object class, java.lang.String has overriden this method for content comparision and java.lang.StringBuffer has not overriden this method, hence for StringBuffer objects == and .equals() are same.

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		StringBuffer sb1 = new StringBuffer("abc");
		StringBuffer sb2 = new StringBuffer("abc");
		StringBuffer sb3 = sb1;

		System.out.println(sb1==sb2);//false
		System.out.println(sb1.equals(sb2));//false

		System.out.println(sb1==sb3);//true
		System.out.println(sb1.equals(sb3));//true
	}
}

output:
-------
false
false
true
true

SCP and Heap Area
-----------------
Object creation in SCP is always optional, if an object is already existed, it wn't create any new object. In the case new keyword every time a new object will be created in heap area.

Ex1:
----
String s = new String("prakash");

heap ---> 1
scp ----> 1
total --> 2

Ex2:
----
String s = "prakash";

heap ---> 0
scp ----> 1
total --> 1

Ex3:
----
String s1 = new String("abc");
String s2 = new String("abc");
String s3 = "abc";
String s4 = "abc";

heap ---> 2
scp ----> 1
total --> 3

Ex4:
----
String s = new String("abc");
s.concat("pqr");
s=s.concat("wxyz");

heap ---> 3
scp ----> 3
total --> 6

Ex5:
----
String s1 = new String("spring");
s1.concat("fall");
String s2 = s1.concat("winter");
s2.concat("summer");

heap ---> 4
scp ----> 4
total --> 8


Ex6:
----
String s1 = "abc";
String s2 = s1.toUpperCase();
String s3 = s1.toLowerCase();

s1==s2 ----> false
s1==s3 ----> true

scp ----> 2
heap ---> 0
total --> 2

Ex7:
----
String s1 = "abc";
String s2 = s1.toString();

s1==s2 ----> true

heap ----> 0
scp -----> 1
total ---> 1

Ex8:
----
String s1 = new String("abc");
String s2 = s1.toString();

s1==s2 ----> false

heap ----> 1
scp -----> 1
total ---> 2

Note:
-----
1) because of runtime operation if there is a change in the content with those changes a new object will be created only on heap area but not on scp area.

2) if there is no change in the content no new object will be created the same obj will be reused. this rule is applicable whether the obj is present in SCP or HEAP.

Ex9:
----
		String s1 = new String("abc");
		String s2 = s1.toString();
		String s3 = s1.toUpperCase();
		String s4 = s1.toLowerCase();
		String s5 = s1.toUpperCase();
		String s6 = s3.toLowerCase();

heap ----> 4
scp -----> 1
total ---> 5

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("abc");
		String s2 = s1.toString();
		String s3 = s1.toUpperCase();
		String s4 = s1.toLowerCase();
		String s5 = s1.toUpperCase();
		String s6 = s3.toLowerCase();
		System.out.println(s3==s5);//false
		System.out.println(s1==s6);//false
		System.out.println(s1==s2);//true
		System.out.println(s1==s4);//true
	}
}

Ex10:
-----
String s1 = new String("i love my india");
String s2 = new String("i love my india");
System.out.println(s1==s2);
String s3 = "i love my india";
System.out.println(s1==s3);
String s4 = "i love my india";
System.out.println(s3==s4);
String s5 = "i love "+"my india";
System.out.println(s4==s5);
String s6 = "i love ";
String s7 = s6+"my india";
System.out.println(s4==s7);
final String s8 = "i love ";
String s9 = s8+"my india";
System.out.println(s4==s9);

heap ------> 3
scp -------> 3
total -----> 6

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("i love my india");
		String s2 = new String("i love my india");
		System.out.println(s1==s2);//false
		String s3 = "i love my india";
		System.out.println(s1==s3);//false
		String s4 = "i love my india";
		System.out.println(s3==s4);//true
		String s5 = "i love "+"my india";
		System.out.println(s4==s5);//true
		String s6 = "i love ";
		String s7 = s6+"my india";
		System.out.println(s4==s7);//false
		final String s8 = "i love ";
		String s9 = s8+"my india";
		System.out.println(s4==s9);//true
	}
}

Interning of String objects:
----------------------------
Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("abc");
		String s2 = s1.intern();
		String s3 = "abc";

		System.out.println(s2==s1);//false
		System.out.println(s2==s3);//true
	}
}

Ex:
---
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("abc");
		String s2 = s1.concat("def");
		String s3 = s2.intern();
		String s4 = "abcdef";

		System.out.println(s3==s4);//true
	}
}

regular expressions and applications
------------------------------------
a group of strings according to particualr pattern or format is called as re

steps to regular expression objects
-----------------------------------
1) import java.util.regex.*;
2) pattern object -----> format of data
3) matcher object -----> target string or input

predefined character classes:
-----------------------------
\s 		space character
\S 		except space character
\d 		digit
\D 		except digit
\w 		word character (a-z,A-Z,0-9)
\W 		except word character


Ex1:
----
import java.util.regex.*;

class Test
{
	public static void main(String[] args)
	{
		Pattern p = Pattern.compile("\\W");//pattern obj
		Matcher m = p.matcher("abc$123#iJk^456*pQr wXYz");//target str
		int c=0;
		while(m.find()){
			c++;
		}
		System.out.println(c);
	}
}

userdefined character classes:
------------------------------
[abc] 		either 'a' or 'b' or 'c'
[^abc]		except either 'a' or 'b' or 'c'
[0-9]		all digits
[^0-9]		except digits
[a-z]		only lower case alphabets
[^a-z]		except lower case alphabets
[A-Z]		only upper case alphabets
[^A-Z]		except upper case alphabets
[a-zA-Z]	both lower and upper case alphabets
[a-zA-Z0-9]	word characer
[^a-zA-Z]	except lower and upper case alphabets
[^a-zA-Z0-9]except word characer


Ex2:
----
import java.util.regex.*;

class Test
{
	public static void main(String[] args)
	{
		Pattern p = Pattern.compile("[0-2]");//pattern obj
		Matcher m = p.matcher("abc$123#iJk^456*pQr wXYz");//target str
		int c=0;
		while(m.find()){
			c++;
		}
		System.out.println(c);
	}
}

Ex3:
----
import java.util.regex.*;

class Test
{
	public static void main(String[] args)
	{
		Pattern p = Pattern.compile("[a-z]");//pattern obj
		Matcher m = p.matcher("abc$123#iJk^456*pQr wXYz");//target str
		int c=0;
		while(m.find()){
			c++;
		}
		System.out.println(c);
	}
}

Ex4:
----
import java.util.regex.*;

class Test
{
	public static void main(String[] args)
	{
		Pattern p = Pattern.compile("[^a-zA-Z0-9 ]");//pattern obj
		Matcher m = p.matcher("abc$123#iJk^456*pQr wXYz");//target str
		int c=0;
		while(m.find()){
			c++;
		}
		System.out.println(c);
	}
}

quantifiers:
------------
a  			exactly one 'a'
a+ 			one or more 'a's
a* 			zero or more characters
a? 			zero or one character
a{m} 		exactly 'm' number of a's
a{m,n} 		min 'm' number of a's and max 'n' number of a's

Ex5:
----
import java.util.regex.*;

class Test
{
	public static void main(String[] args)
	{
		Pattern p = Pattern.compile("a{3,5}");//pattern obj
		Matcher m = p.matcher("abaabaaabaaaabaaaaabaaaaaab");//target str
		while(m.find()){
			System.out.println(m.start()+"===>"+m.end()+"===>"+m.group());
		}
	}
}

01. Impl prg to read str and print char and corresponding index value.
-----------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			System.out.println(i+" ====> "+s.charAt(i));
		}
	}
}

output:
-------
welcome
0 ====> w
1 ====> e
2 ====> l
3 ====> c
4 ====> o
5 ====> m
6 ====> e

02. Impl prg to read str and print chars present at even/odd index values.
--------------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			if(i%2==0)
				System.out.println(i+" ====> "+s.charAt(i));
		}
	}
}

output:
-------
welcome
0 ====> w
2 ====> l
4 ====> o
6 ====> e

03. Impl prg to print vowels/consonants present in the given str.
-----------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		for(int i=0;i<s.length();i++){
			char temp = s.charAt(i);
			if(temp=='a'||temp=='e'||temp=='i'||temp=='o'||temp=='u')
				System.out.println(s.charAt(i));
		}
	}
}

output:
-------
welcome
e
o
e

04. Impl prg to count numbers of vowels/consonants present in the given str.
----------------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("welcome");
		                     //0123456
		System.out.println(s);
		int count=0;
		for(int i=0;i<s.length();i++){
			char temp = s.charAt(i);
			if(temp=='a'||temp=='e'||temp=='i'||temp=='o'||temp=='u')
				count++;
		}
		System.out.println(count);
	}
}

output:
-------
3

05. Impl prg to sort all the characters in asc/desc order.
----------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("welcome");
		char ch[] = s1.toCharArray();

		Arrays.sort(ch);
		String s2 = new String(ch);

		System.out.println(s1);
		System.out.println(s2);
	}
}

output:
-------
welcome
ceelmow

06. Impl prg to check whether the given strs are anagrams or not.
-----------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s1 = new String("race");
		String s2 = new String("care");
		String s3 = new String("cary");

		char ch1[] = s1.toCharArray();
		char ch2[] = s2.toCharArray();
		char ch3[] = s3.toCharArray();

		Arrays.sort(ch1);
		Arrays.sort(ch2);
		Arrays.sort(ch3);

		System.out.println(Arrays.equals(ch1,ch2));
		System.out.println(Arrays.equals(ch1,ch3));
	}
}

output:
-------
true
false

07. Impl prg to check whether the given str is paliandrome or not.
------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		String ss = new StringBuffer(s).reverse().toString();

		System.out.println(s.equals(ss));
	}
}

output:
-------
C:\prakashclasses>java Test
Enter any string:
liril
true

C:\prakashclasses>java Test
Enter any string:
madam
true

C:\prakashclasses>java Test
Enter any string:
abcd
false

C:\prakashclasses>java Test
Enter any string:
123
false

C:\prakashclasses>java Test
Enter any string:
121
true

08. Impl prg to check whether the given str is pangram or not.
--------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		String s = new String("the quick brown fox jumps over the lazy dog");
		boolean flag = true;
		System.out.println(s);
		for(int i='a';i<='z';i++){
			if(s.indexOf(i)<0){
				flag = false;
				break;
			}
		}
		System.out.println(flag);
	}
}

output:
-------
C:\prakashclasses>java Test
abcdefghijklmnopqrstuvwxyz
true

C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
abcdefghijklmnopqrsuvwxyz
false

C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
the quick brown fox jumps over the lazy dog
true

09. Impl prg to divide the strings seperated by spaces/comma/-.
---------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		StringTokenizer st = new StringTokenizer(s," ");
		while(st.hasMoreTokens()){
			System.out.println(st.nextToken());
		}
	}
}

output:
-------
Enter any string:
java is very very easy to understand.
java
is
very
very
easy
to
understand.

10. Impl prg to reverse the entire sentence.
--------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer(s);
		sb.reverse();
		System.out.println(sb);
	}
}

output:
-------
Enter any string:
java is very very difficult while learning
gninrael elihw tluciffid yrev yrev si avaj

11. Impl prg to reverse individual words.
-----------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);

		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java is very easy for coding.
avaj si yrev ysae rof .gnidoc

12. Impl prg to reverse alternative words.
------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		int i=0;
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			if(i%2==0)
				sb.append(ss);
			else
				sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
			i++;
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
abc def ijk pqrs xyz
abc fed ijk srqp xyz

13. Impl prg to reverse even/odd length words.
----------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			if(ss.length()%2!=0)
				sb.append(ss);
			else
				sb.append(new StringBuffer(ss).reverse());
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java was very easy programming language when compared with other
avaj was yrev ysae programming egaugnal nehw derapmoc htiw other

14. Impl prg to convert every word first char into caps.
--------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();

			sb.append(ss.substring(0,1).toUpperCase()+ss.substring(1));
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java was very easy programming language when compared with other
Java Was Very Easy Programming Language When Compared With Other

15. Impl prg to convert every word first and last char into caps.
-----------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);
		int n;
		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			n = ss.length();
			sb.append(ss.substring(0,1).toUpperCase()+ss.substring(1,n-1)+ss.substring(n-1,n).toUpperCase());
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}


output:
-------
Enter any string:
java was very easy programming language when compared with other
JavA WaS VerY EasY ProgramminG LanguagE WheN CompareD WitH OtheR

16. Impl prg to convert except first and last chars, remaining into upper case.
-------------------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);
		int n;
		System.out.println("Enter any string:");
		String s = obj.nextLine();
		StringBuffer sb = new StringBuffer();
		StringTokenizer st = new StringTokenizer(s);
		while(st.hasMoreTokens())
		{
			String ss = st.nextToken();
			n = ss.length();
			sb.append(ss.substring(0,1)+ss.substring(1,n-1).toUpperCase()+ss.substring(n-1,n));
			sb.append(" ");
		}

		System.out.println(sb.toString());
	}
}

output:
-------
Enter any string:
java was very easy programming language when compared with other
jAVa wAs vERy eASy pROGRAMMINg lANGUAGe wHEn cOMPAREd wITh oTHEr

17. American board
--------------------
Given a string, return the true if that can be typed using letters of alphabet on only one row's of American keyboard like the image below.

In the American keyboard:
=> the first row consists of the characters "qwertyuiop",
=> the second row consists of the characters "asdfghjkl", and
=> the third row consists of the characters "zxcvbnm".

Note:
1. You may use one character in the keyboard more than once.
2. You may assume the input string will only contain letters of alphabet.

import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);//dad
		String s = obj.nextLine();
		String r1 = "qwertyuiop", r2 = "asdfghjkl", r3 = "zxcvbnm";
		int i,c1=0,c2=0,c3=0;
		for(i=0;i<s.length();i++){
			if(r1.contains(Character.toString(s.charAt(i))))
				c1++;
			else if(r2.contains(Character.toString(s.charAt(i))))
				c2++;
			else if(r3.contains(Character.toString(s.charAt(i))))
				c3++;
		}
		System.out.println(c1==s.length() || c2==s.length() || c3==s.length());
	}
}

C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
mom
false

C:\prakashclasses>java Test
dad
true

C:\prakashclasses>java Test
asdf
true

C:\prakashclasses>java Test
asdc
false

C:\prakashclasses>java Test
asde
false

C:\prakashclasses>java Test
pop
true

C:\prakashclasses>java Test
true
true

C:\prakashclasses>java Test
false
false

18. Rotate String
-----------------
Given two strings s and ss, return true if and only if s can become ss after some number of shifts on s. A shift on s consists of moving the leftmost character of s to the rightmost position.
For example, if s = "abcde", then it will be "bcdea" after one shift.

Ex:
---
	s = "abcde" and ss = "bcdea" ----> true

	abcde
	bcdea
	cdeab
	deabc
	eabcd

	abcdeabcde
Ex:
---

	s = "abcde" and ss = "bcdae" ----> false
	abcde
	bcdea
	cdeab
	deabc
	eabcd

import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);//dad
		String s = obj.nextLine();
		String ss = obj.nextLine();
		System.out.println((s+s).contains(ss));
	}
}

C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
abc
cba
false

C:\prakashclasses>java Test
abc
cab
true

C:\prakashclasses>java Test
abcde
bcdea
true

19. Impl prg to return middle char(s).
--------------------------------------
Ex:		abc ----> b
Ex:     abcd ---> bc

s.length()/2 ---> 3/2 --> 1 -----> s.charAt(mid)
s.length()/2 ---> 4/2 --> 1,2 ---> s.charAt(mid-1,mid)

import java.util.*;

class Test
{
	public static void main(String[] args)
	{
		Scanner obj = new Scanner(System.in);//dad
		String s = obj.nextLine();
		int n=s.length(),mid=n/2;
		if(n%2==0)
			System.out.println(s.charAt(mid-1)+""+s.charAt(mid));
		else
			System.out.println(s.charAt(mid));
	}
}

C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
abc
b

C:\prakashclasses>java Test
abcd
bc

20. Impl prg to remove duplicate characters from the given str.
---------------------------------------------------------------
Ex:
---
	welcome ----> welcom
	abcabac ----> abc

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter source string:");
		String s = obj.nextLine();

		String ss = "";
		for(int i=0;i<s.length();i++){
			if(ss.indexOf(s.charAt(i))<0)
				ss=ss+s.charAt(i);
		}
		System.out.println(ss);
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter source string:
welcome
welcom

C:\prakashclasses>java Test
Enter source string:
abcababcab
abc

C:\prakashclasses>java Test
Enter source string:
prakash
praksh

21. Chess Board
---------------
You are given coordinates, a string that represents the coordinates of a square of the chess board. bellow is the chess board for your reference.

Return True if the saquare is in white, and false if the square is in Black.

The coordinates will always represent a valid chess board square. The coordinates will always have the letter first, and the number second.

input ----------> a string
output ---------> true or false


xx ------> white ------> true
xx ------> black ------> false


import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter chess board address:");
		String s = obj.nextLine();

		int x = s.charAt(0)-96;
		int y = s.charAt(1);

		System.out.println(x%2!=y%2);
	}
}

C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter chess board address:
a1
false

C:\prakashclasses>java Test
Enter chess board address:
a2
true

C:\prakashclasses>java Test
Enter chess board address:
f4
false

C:\prakashclasses>java Test
Enter chess board address:
f5
true

C:\prakashclasses>java Test
Enter chess board address:
h8
false

C:\prakashclasses>java Test
Enter chess board address:
18
true

22. Impl prg to convert lower case chars to upper case and vice versa (swapcase).
---------------------------------------------------------------------------------
import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		String ss = "";
		for(int i=0;i<s.length();i++){
			if(s.charAt(i)>='a' && s.charAt(i)<='z')
				ss=ss+(char)(s.charAt(i)-32);
			if(s.charAt(i)>='A' && s.charAt(i)<='Z')
				ss=ss+(char)(s.charAt(i)+32);
		}
		System.out.println(ss);
	}
}

output:
-------
WeLcOmE
wElCoMe

23. Impl prg to remove special characters present in the given str.
-------------------------------------------------------------------
a-z, A-Z and 0-9 ----> add into ss else ignore

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any string:");
		String s = obj.nextLine();

		String ss = "";
		for(int i=0;i<s.length();i++){
			char ch = s.charAt(i);
			if((ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z')||(ch>='0'&&ch<='9'))
				ss=ss+ch;
		}
		System.out.println(ss);
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter any string:
ca$h
cah

C:\prakashclasses>java Test
Enter any string:
prakash @ gmail . com # 123 % 789
prakashgmailcom123789

24. Impl prg to convert the given integer value into english word.
------------------------------------------------------------------
Ex:
---
	123 ----> one two three
	4510 ---> four five one zero

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter any num:");//123
		String s = obj.nextLine();
		for(int i=0;i<s.length();i++){
			char ch = s.charAt(i);
			switch(ch){
			case '0': System.out.print("zero ");break;
			case '1': System.out.print("one ");break;
			case '2': System.out.print("two ");break;
			case '3': System.out.print("three ");break;
			case '4': System.out.print("four ");break;
			case '5': System.out.print("five ");break;
			case '6': System.out.print("six ");break;
			case '7': System.out.print("seven ");break;
			case '8': System.out.print("eight ");break;
			case '9': System.out.print("nine ");break;
			}
		}
	}
}

output:
-------
C:\prakashclasses>java Test
Enter any num:
123
one two three
C:\prakashclasses>java Test
Enter any num:
89107
eight nine one zero seven

25. Impl prg to validate ATM pin number.
----------------------------------------
[0-9]{4}

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter atm pin num:");
		String s = obj.nextLine();
		System.out.println(s.matches("[0-9]{4}"));
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter atm pin num:
1234
true

C:\prakashclasses>java Test
Enter atm pin num:
1209
true

C:\prakashclasses>java Test
Enter atm pin num:
12345
false

C:\prakashclasses>java Test
Enter atm pin num:
a123
false

26. Impl prg to validate mobile number
--------------------------------------
10 digits and first digit ---> 5 or 6 or 7 or 8 or 9

[5-9][0-9]{9}

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter mobile num:");
		String s = obj.nextLine();
		System.out.println(s.matches("[5-9][0-9]{9}"));
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter mobile num:
7386237319
true

C:\prakashclasses>java Test
Enter mobile num:
1786237319
false

C:\prakashclasses>java Test
Enter mobile num:
73862373198
false

27. Impl prg to validate gmail id
---------------------------------
abc@gmail.com

[a-z][a-zA-Z0-9][a-zA-Z0-9]+@gamil[.]com

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter gmail id:");
		String s = obj.nextLine();
		System.out.println(s.matches("[a-z][a-zA-Z0-9][a-zA-Z0-9]+@gmail[.]com"));
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter gmail id:
abc@gmail.com
true

C:\prakashclasses>java Test
Enter gmail id:
1abc@gmail.com
false

C:\prakashclasses>java Test
Enter gmail id:
abc$def@gmail.com
false

C:\prakashclasses>java Test
Enter gmail id:
prakash@facebook.com
false

28. Impl prg to validate student university hall ticket number
--------------------------------------------------------------
DS00001
DS[0-9]{5}

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter student id:");
		String s = obj.nextLine();
		System.out.println(s.matches("DS[0-9]{5}"));
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter student id:
DS00001
true

C:\prakashclasses>java Test
Enter student id:
DS00045
true

C:\prakashclasses>java Test
Enter student id:
TS00045
false

29. Impl prg to validate bike registration number
-------------------------------------------------
TS 21 CA 1234

TS[0-9]{2}[A-Z]{2}[0-9]{4}

import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter bike number:");
		String s = obj.nextLine();
		System.out.println(s.matches("TS[0-9]{2}[A-Z]{2}[0-9]{4}"));
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter bike number:
TS03AP1234
true

C:\prakashclasses>java Test
Enter bike number:
TS123A1234
false

30. Impl prg to validate given date.
------------------------------------
03-01-2023

[0-3][0-9]-[0-1][0-2]-202[3-9]


import java.util.*;

class Test
{
	public static void main(String[] args) throws Exception
	{
		Scanner obj = new Scanner(System.in);

		System.out.println("Enter date value:");
		String s = obj.nextLine();
		System.out.println(s.matches("[0-3][0-9]-[0-1][0-2]-202[3-9]"));
	}
}

output:
-------
C:\prakashclasses>javac Test.java

C:\prakashclasses>java Test
Enter date value:
03-01-2023
true

C:\prakashclasses>java Test
Enter date value:
03-01-2029
true