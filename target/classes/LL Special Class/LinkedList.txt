LINKED LIST DATA STRUCTURE
~~~~~~~~~~~~~~~~~~~~~~~~~~~

the problems with arrays are:

1) size if always fixed.
2) inserting and deleting is very difficult.

to overcome these problems, we have linked list data structure.

linked list:
~~~~~~~~~~~~
it is collection of nodes which are growable. during execution we can insert and delete nodes from linked list. linked list is the best data structure for inserting and deleting elements.

accessing elements ----> best -----> arrays
insert/delete ---------> best -----> linked list

the following are the four types of linked lists are existed in java

1) single linked list
2) double linked list
3) circular single linked list
4) circular double linked list

single linked list
-------------------
01) Inserting the data first         ------------> ok
02) Inserting the data last        --------------> ok
03) Inserting the data at position        -------> ok
04) Sorted Insertion Asc/Desc        ------------> ok
05) Traversing or Displaying        -------------> ok
06) Size or Length of list	   --------------> ok
07) Reverse List        -------------------------> ok
08) Searching        ----------------------------> ok
09) Deleting from first        ------------------> ok
10) Deleting from last        -------------------> ok
11) Delete from position        -----------------> ok
12) Deleting Element       - --------------------> ok
13) Deleting Elements        --------------------> ok
14) Deleting Duplicates        ------------------> ok
15) Copy the reversed list        ---------------> ok
16) Copy of original list        ----------------> ok
17) Comparing two list objects ------------------> ok
18) Finding nth node from begining and ending ---> ok


list ---> 111=>222=>333=>null 

reverse:
--------
list ---> 333=>222=>111=> null

copyreversed:
-------------
list -----> 111=>222=>333=>null
list1 ----> 333=>222=>111=>null


package lists;
public class SLL 
{
	Node head;
	int size;
	class Node{
		int data;
		Node next;
		Node(int data){
			this.data = data;
			this.next = null;
			size++;
		}
		Node(int data,Node next){
			this.data = data;
			this.next = next;
			size++;
		}
	}
	void traverse() {
		if(head==null) {
			System.out.println("SLL is empty");
			return;
		}
		Node currNode = head;
		while(currNode!=null) {
			System.out.print(currNode.data+" => ");
			currNode = currNode.next;
		}
		System.out.println("null");
	}
	void addFirst(int data) {
		Node newNode = new Node(data);
		if(head==null) {
			head = newNode;
			return;
		}
		newNode.next = head;
		head = newNode;
	}
	void addLast(int data) {
		Node newNode = new Node(data);
		if(head==null) {
			head = newNode;
			return;
		}
		Node currNode = head;
		while(currNode.next!=null){
			currNode = currNode.next;
		}
		currNode.next = newNode;
	}
	void addPos(int data, int pos) {
		int i=0;
		Node newNode = new Node(data);
		if(head==null) {
			head = newNode;
			return;
		}
		if(pos<0 || pos>=size-1) {
			System.out.println("out of range");
			return;
		}
		if(pos!=0) {
			Node currNode=head,temp=null;
			while(currNode.next!=null && i<pos) {
				temp = currNode;
				currNode = currNode.next;
				i++;
			}
			temp.next = newNode;
			newNode.next = currNode;
		}
		else {
			newNode.next = head;
			head = newNode;
		}
	}
	void sortedInsertAsc(int data) {
		Node newNode = new Node(data);
		Node currNode = head;
		if(currNode==null || currNode.data > data) {
			newNode.next = head;
			head = newNode;
			return;
		}
		while(currNode.next!=null && currNode.next.data<data)
			currNode = currNode.next;
		newNode.next = currNode.next;
		currNode.next = newNode;
	}
	void sortedInsertDesc(int data) {
		Node newNode = new Node(data);
		Node currNode = head;
		if(currNode==null || currNode.data < data) {
			newNode.next = head;
			head = newNode;
			return;
		}
		while(currNode.next!=null && currNode.next.data>data)
			currNode = currNode.next;
		newNode.next = currNode.next;
		currNode.next = newNode;
	}
	int getSize() {
		return this.size;
	}
	boolean search(int data) {
		Node currNode = head;
		while(currNode!=null) {
			if(currNode.data == data) 
				return true;
			currNode = currNode.next;
		}
		return false;
	}
	void deleteFirst() {
		if(head==null) {
			System.out.println("SLL is empty");
			return;
		}
		size--;
		head = head.next;
	}
	void deleteLast() {
		if(head==null) {
			System.out.println("SLL is empty");
			return;
		}
		if(head.next == null) {
			head = null;
			size--;
			return;
		}
		size--;
		Node temp1=head,temp2=head.next;
		while(temp2.next!=null) {
			temp2 = temp2.next;
			temp1 = temp1.next;
		}
		temp1.next = null;
	}
	void deletePos(int pos) {
		Node temp = head;
		int i=0;
		if(temp==null) {
			System.out.println("SLL is empty");
			return;
		}
		if(pos==0) {
			head=head.next;
			size--;
			return;
		}
		if(pos<0 || pos>=size-1) {
			System.out.println("out of range");
			return;
		}
		while(temp.next!=null && i<pos) {
			if(i==pos-1) {
				temp.next = temp.next.next;
				size--;
				return;
			}
			i++;
			temp=temp.next;
		}
	}
	void deleteElement(int value) {
		Node temp = head;
		if(temp==null) {
			System.out.println("SLL is empty");
			return;
		}
		if(temp.data==value) {
			head = head.next;
			size--;
			return;
		}
		while(temp.next!=null) {
			if(temp.next.data == value) {
				temp.next = temp.next.next;
				size--;
				return;
			}
			temp = temp.next;
		}
	}
	void deleteElements(int value) {
		Node temp = head;
		if(temp==null) {
			System.out.println("SLL is empty");
			return;
		}
		if(temp.data==value) {
			head = head.next;
			size--;
		}
		while(temp.next!=null) {
			if(temp.next.data == value) {
				temp.next = temp.next.next;
				size--;
			}
			if(temp.next!=null)
				temp = temp.next;
		}
	}
	void reverse() {
		Node currNode = head, prev = null, next = null;
		while(currNode!=null) {
			next = currNode.next;
			currNode.next = prev;
			prev = currNode;
			currNode = next;
		}
		head = prev;
	}
	//Note: compulsory the list must be in sorted form
	void removeDuplicates() {
		Node currNode = head;
		while(currNode!=null) {
			if(currNode.next!=null && currNode.data == currNode.next.data) 
				currNode.next = currNode.next.next;
			else
				currNode = currNode.next;
		}
	}
	SLL copyReversed() {
		Node temp1 = null, temp2=null, currNode = head;
		while(currNode!=null) {
			temp2 = new Node(currNode.data,temp1);
			currNode = currNode.next;
			temp1 = temp2;
		}
		SLL obj = new SLL();
		obj.head = temp1;
		return obj;
	}
	SLL copyList() {
		Node headNode = null, tailNode=null, tempNode = null, currNode = head;
		if(currNode==null)
			return null;
		headNode = new Node(currNode.data,null);
		tailNode = headNode;
		currNode = currNode.next;
		while(currNode!=null) {
			tempNode = new Node(currNode.data,null);
			tailNode.next = tempNode;
			tailNode = tempNode;
			currNode = currNode.next;
		}
		SLL obj = new SLL();
		obj.head = headNode;
		return obj;
	}
	boolean compareList(SLL list) {
		Node head1=head,head2=list.head;
		while(head1!=null && head2!=null) {
			if(head1.data!=head2.data)
				return false;
			head1 = head1.next;
			head2 = head2.next;
		}
		if(head1==null && head2==null)
			return true;
		return false;
	}
	int nthNodeFromBegin(int index) {
		if(index>getSize() || index<1)
			return -1;
		int count=0;
		Node currNode = head;
		while(currNode!=null && count<index-1) {
			count++;
			currNode = currNode.next;
		}
		return currNode.data;
	}
	int nthNodeFromEnd(int index) {
		int size = getSize(),sindex;
		if(size!=0 && size<index)
			return -1;
		sindex = size-index+1;
		return nthNodeFromBegin(sindex);
	}
}

double linked list
-------------------
01) Inserting the data first         ------------> ok
02) Inserting the data last        --------------> ok
03) Inserting the data at position        -------> ok
04) Sorted Insertion Asc/Desc        ------------> ok
05) Traversing or Displaying        -------------> ok
06) Size or Length of list	   --------------> ok
07) Reverse List        -------------------------> ok
08) Searching        ----------------------------> ok
09) Deleting from first        ------------------> ok
10) Deleting from last        -------------------> ok
11) Delete from position        -----------------> ok
12) Deleting Element       - --------------------> ok
13) Deleting Elements        --------------------> ok
14) Deleting Duplicates        ------------------> ok
15) Copy the reversed list        ---------------> ok
16) Copy of original list        ----------------> ok
17) Comparing two list objects ------------------> ok

package lists;

public class DLL {
	Node head;
	int size = 0;
	class Node{
		int data;
		Node next;
		Node prev;
		Node(int data,Node next,Node prev){
			this.data = data;
			this.next = next;
			this.prev = prev;
			size++;
		}
	}
	void traverse() {
		if(head==null){
			System.out.println("DLL is empty");return;
		}
		Node currNode = head;
		while(currNode!=null) {
			System.out.print(currNode.data+" ==> ");
			currNode = currNode.next;
		}
		System.out.println("NULL");
	}
	void addFirst(int data) {
		Node newNode = new Node(data,null,null);
		if(head==null)
			head = newNode;
		else {
			head.prev = newNode;
			newNode.next = head;
			head = newNode;
		}
	}
	void addLast(int data) {
		Node newNode = new Node(data,null,null);
		if(head==null)
			head = newNode;
		else {
			Node currNode = head;
			while(currNode.next!=null)
				currNode = currNode.next;
			currNode.next = newNode;
			newNode.prev = currNode;
		}
	}
	void addPos(int data,int pos) {
		int i=0;
		if(pos<0 || pos>=size) {
			System.out.println("out of range");return;
		}
		Node newNode = new Node(data,null,null);
		if(head==null) {
			head = newNode;
			return;
		}
		if(pos!=0) {
			Node currNode = head;
			Node temp=null;
			while(currNode.next!=null && i<pos) {
				temp = currNode;
				currNode = currNode.next;
				i++;
			}
			temp.next = newNode;
			newNode.prev = temp;
			newNode.next = currNode;
			currNode.prev = newNode;
		}
		else {
			newNode.next = head;
			head.prev = newNode;
			head = newNode;
		}
	}
	void sortedInsertAsc(int data) {
		Node newNode = new Node(data,null,null);
		Node currNode = head;
		if(currNode == null) {
			head = newNode;
			return;
		}
		if(currNode.data>data) {
			newNode.next = head;
			head.prev = newNode;
			head = newNode;
			return;
		}
		while(currNode.next!=null && currNode.next.data<data)
			currNode = currNode.next;
		if(currNode.next!=null) {
			newNode.next = currNode.next;
			currNode.next.prev = newNode;
			currNode.next = newNode;
			newNode.prev = currNode;
		}
		else {
			currNode.next = newNode;
			newNode.prev = currNode;
		}
	}
	void sortedInsertDesc(int data) {
		Node newNode = new Node(data,null,null);
		Node currNode = head;
		if(currNode == null) {
			head = newNode;
			return;
		}
		if(currNode.data<data) {
			newNode.next = head;
			head.prev = newNode;
			head = newNode;
			return;
		}
		while(currNode.next!=null && currNode.next.data>data)
			currNode = currNode.next;
		if(currNode.next!=null) {
			newNode.next = currNode.next;
			currNode.next.prev = newNode;
			currNode.next = newNode;
			newNode.prev = currNode;
		}
		else {
			currNode.next = newNode;
			newNode.prev = currNode;
		}
	}
	int getSize() {
		return this.size;
	}
	boolean search(int data) {
		Node temp = head;
		while(temp!=null)
		{
			if(temp.data == data)
				return true;
			temp = temp.next;
		}
		return false;
	}
	boolean compareList(DLL list) {
		Node head1 = head,head2 = list.head;
		while(head1!=null && head2!=null) {
			if(head1.data!=head2.data)
				return false;
			head1 = head1.next;
			head2 = head2.next;
		}
		if(head1==null && head2==null)
			return true;
		return false;
	}
	void reverse() {
		Node temp=null,currNode=head;
		while(currNode!=null) {
			temp = currNode.prev;
			currNode.prev = currNode.next;
			currNode.next = temp;
			currNode = currNode.prev;
		}
		if(temp!=null)
			head = temp.prev;
	}
	void deleteFirst() {
		if(head==null) {
			System.out.println("DLL is empty");
			return;
		}
		size--;
		head = head.next;
		if(head!=null)
			head.prev = null;
	}
	void deleteLast() {
		if(head==null) {
			System.out.println("DLL is empty");return;
		}
		if(head.next==null) {
			head = null;
			size--;
			return;
		}
		size--;
		Node temp = head;
		Node currNode = head.next;
		while(currNode.next!=null) {
			currNode = currNode.next;
			temp = temp.next;
		}
		temp.next = null;	
	}
	void deleteAtPos(int pos) {
		Node temp = head,tempp;
		int i=0;
		if(temp==null) {
			System.out.println("DLL is empty");return;
		}
		if(pos<0 || pos>=getSize()) {
			System.out.println("out of range");return;
		}
		if(pos==0) {
			head=head.next;
			if(head!=null)
				head.prev=null;
			size--;
			return;
		}
		while(temp.next!=null && i<pos) {
			if(i==pos-1) {
				temp.next = temp.next.next;
				tempp = temp.next;
				if(tempp!=null)
					tempp.prev = temp;
				size--;
				return;
			}
			i++;
			temp=temp.next;
		}		
	}
	void deleteElement(int data) {
		Node temp = head,tempp;
		if(temp==null) {
			System.out.println("DLL is empty");return;
		}
		if(temp.data == data) {
			head = head.next;
			if(head!=null)
				head.prev = null;
			size--;
			return;
		}
		while(temp.next!=null) {
			if(temp.next.data == data) {
				temp.next = temp.next.next;
				tempp = temp.next;
				if(tempp!=null)
					tempp.prev = temp;
				size--;
				return;
			}
			temp = temp.next;
		}
	}
	void deleteElements(int data) {
		Node temp = head,tempp;
		if(temp==null) {
			System.out.println("DLL is empty");return;
		}
		if(temp.data == data) {
			head = head.next;
			if(head!=null)
				head.prev = null;
			size--;
			return;
		}
		while(temp.next!=null) {
			if(temp.next.data == data) {
				temp.next = temp.next.next;
				tempp = temp.next;
				if(tempp!=null)
					tempp.prev = temp;
				size--;
			}
			temp = temp.next;
		}
	}
	//list should in order
	void removeDuplicates() {
		Node currNode = head,temp;
		while(currNode!=null) {
			if(currNode.next!=null && currNode.data == currNode.next.data) {
				currNode.next = currNode.next.next;
				temp = currNode.next;
				if(temp!=null)
					temp.prev = currNode;
			}else {
				currNode = currNode.next;
			}
		}
	}
	DLL copyList() {
		Node headNode=null,tailNode,tempNode,currNode=head;
		tailNode = null;
		tempNode = null;
		if(currNode==null)
			return null;
		headNode = new Node(currNode.data,null,null);
		tailNode = headNode;
		currNode = currNode.next;
		while(currNode!=null) {
			tempNode = new Node(currNode.data,null,null);
			tailNode.next = tempNode;
			tempNode.prev = tailNode;
			tailNode = tempNode;
			currNode = currNode.next;
		}
		DLL obj = new DLL();
		obj.head = headNode;
		return obj;
	}
	DLL copyReverse() {
		Node temp1=null,temp2=null,currNode=head;
		while(currNode!=null) {
			temp2 = new Node(currNode.data,temp1,null);
			currNode = currNode.next;
			if(temp1!=null)
				temp1.prev = temp2;
			temp1 = temp2;
		}
		DLL obj = new DLL();
		obj.head = temp1;
		return obj;
	}
}

Circular Single Linked List
~~~~~~~~~~~~~~~~~~~~~~~~~~~
package lists;

public class CSLL {
	Node tail;
	int size = 0;
	class Node{
		int value;
		Node next;
		Node(int value,Node next){
			this.value = value;
			this.next = next;
		}
	}
	void print() {
		if(size==0) {
			System.out.println("CSLL is empty");
			return;
		}
		Node temp = tail.next;
		while(temp!=tail) {
			System.out.print(temp.value+" => ");
			temp = temp.next;
		}
		System.out.println(temp.value);
	}
	void addHead(int value) {
		Node temp = new Node(value,null);
		if(size==0) {
			tail = temp;
			temp.next = temp;
		}
		else {
			temp.next = tail.next;
			tail.next = temp;
		}
		size++;
	}
	void addTail(int value) {
		Node temp = new Node(value,null);
		if(size==0) {
			tail = temp;
			temp.next = temp;
		}
		else {
			temp.next = tail.next;
			tail.next = temp;
			tail = temp;
		}
		size++;
	}
	void addPos(int pos,int value) {
		Node newNode = new Node(value,null);
		if(size==0) {
			tail = newNode;
			newNode.next = newNode;
		}
		else {
			if(pos==0) {
				Node temp = tail.next;
				newNode.next = temp;
				tail.next = newNode;
			}
			else {
				Node temp = tail.next;
				int i=0;
				while(temp.next!=tail && i<pos-1) {
					temp = temp.next;
					i++;
				}
				newNode.next = temp.next;
				temp.next = newNode;
			}			
		}
		size++;
	}
	void removeHead() {
		if(size==0) {
			System.out.println("CSLL is empty");
			return;
		}
		if(tail==tail.next)
			tail = null;
		else 
			tail.next = tail.next.next;
		size--;			
	}
	void removeTail() {
		if(size==0) {
			System.out.println("CSLL is empty");
			return;
		}
		if(tail == tail.next)
			tail = null;
		else {
			Node temp = tail.next;
			while(temp.next!=tail)
				temp = temp.next;
			temp.next = tail.next;
			tail = temp;
		}
		size--;
	}
	void deleteElement(int value) {
		if(size==0) {
			System.out.println("CSLL is empty");
			return;
		}
		Node prev=tail,currNode=tail.next,head=tail.next;
		if(currNode.value == value) {
			if(currNode==currNode.next)
				tail=null;
			else
				tail.next = tail.next.next;
			size--;
			return;
		}
		
			prev = currNode;
			currNode = currNode.next;
			while(currNode!=head) {
				if(currNode.value==value) {
					if(currNode==tail)
						tail=prev;
				prev.next = currNode.next;
				return;
				}
				prev = currNode;
				currNode = currNode.next;
			}
	}
}

Circular Double Linked List
~~~~~~~~~~~~~~~~~~~~~~~~~~~
package lists;

public class CDLL {
	Node head = null;
	Node tail = null;
	int size = 0;
	class Node{
		int value;
		Node next,prev;
		Node(int value,Node next,Node prev){
			this.value = value;
			this.next = next;
			this.prev = prev;
		}
	}
	void print() {
		if(size==0) {
			System.out.println("CDLL is empty");
			return;
		}
		Node temp = tail.next;
		while(temp!=tail) {
			System.out.print(temp.value+" ==> ");
			temp = temp.next;
		}
		System.out.println(temp.value);
	}
	void addHead(int value) {
		Node newNode = new Node(value,null,null);
		if(size==0) {
			tail = head = newNode;
			newNode.next = newNode;
			newNode.prev = newNode;
		}
		else {
			newNode.next = head;
			newNode.prev = head.prev;
			head.prev = newNode;
			newNode.prev.next = newNode;
			head = newNode;
		}
		size++;
	}
	void addTail(int value) {
		Node newNode =new Node(value,null,null);
		if(size==0) {
			tail = head = newNode;
			newNode.next = newNode;
			newNode.prev = newNode;
		}
		else {
			newNode.next = tail.next;
			newNode.prev = tail;
			tail.next = newNode;
			newNode.next.prev = newNode;
			tail=newNode;
		}
		size++;
	}
	void removeHead() {
		if(size==0) {
			System.out.println("CDLL is empty");
			return;
		}
		size--;
		if(size==0) {
			head = null;
			tail=null;
			return;
		}
		Node temp = head.next;
		temp.prev = tail;
		tail.next = temp;
		head = temp;
	}
	void removeTail() {
		if(size==0) {
			System.out.println("CDLL is empty");
			return;
		}
		size--;
		if(size==0) {
			head= null;
			tail = null;
		}
		Node temp = tail.prev;
		temp.next = head;
		head.prev = temp;
		tail = temp;
	}
}

package lists;

public class Test 
{
	public static void main(String[] args) 
	{
		CDLL list = new CDLL();
		list.addHead(111);
		list.addTail(222);
		list.addTail(333);
		list.addTail(444);
		list.addTail(555);
		list.addHead(888);
		list.addHead(999);
		list.print();
		list.removeHead();
		list.print();
		list.removeTail();
		list.print();
	}
}

